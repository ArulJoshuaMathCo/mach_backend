from sqlalchemy import Column, Integer, Float, ForeignKey, String
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship, column_property
from db.base_class import Base
class Skills1(Base):
    user_id=column_property(Column("EMP ID", String, ForeignKey('mach_employee.EMP ID'), primary_key=True)) 
    python = column_property(Column("Python", Integer, nullable=True))     
    sql = column_property(Column("SQL", Integer, nullable=True))     
    excel = column_property(Column("Excel", Integer, nullable=True))     
    storyboarding = column_property(Column("Storyboarding", Integer, nullable=True))     
    business_communication = column_property(Column("Business Communication", Integer, nullable=True)) 
    javascript = column_property(Column("Javascript", Integer, nullable=True))      
    exploratory_data_analysis = column_property(Column("Exploratory Data Analysis", Integer, nullable=True))    
    statistics = column_property(Column("Statistics", Integer, nullable=True))     
    bayesian_statistics = column_property(Column("Bayesian Statistics", Integer, nullable=True))     
    feature_engineering = column_property(Column("Feature Engineering", Integer, nullable=True))     
    feature_selection = column_property(Column("Feature Selection", Integer, nullable=True))     
    modelling_process = column_property(Column("Modelling Process", Integer, nullable=True))     
    causal_analysis_and_design_of_experiments = column_property(Column("Causal Analysis & Design of Experiments", Integer, nullable=True))     
    probability = column_property(Column("Probability", Integer, nullable=True))     
    linear_algebra = column_property(Column("Linear Algebra", Integer, nullable=True))     
    hyperparameters_tuning = column_property(Column("Hyperparameters Tuning", Integer, nullable=True))     
    dimensionality_reduction = column_property(Column("Dimensionality Reduction", Integer, nullable=True))     
    regression = column_property(Column("Regression", Integer, nullable=True))     
    clustering = column_property(Column("Clustering", Integer, nullable=True))     
    time_series_analysis = column_property(Column("Time Series Analysis", Integer, nullable=True))     
    classification = column_property(Column("Classification", Integer, nullable=True))     
    nlp = column_property(Column("NLP", Integer, nullable=True))     
    neural_networks = column_property(Column("Neural Networks", Integer, nullable=True))     
    computer_vision = column_property(Column("Computer Vision", Integer, nullable=True))     
    reinforcement_learning = column_property(Column("Reinforcement Learning", Integer, nullable=True))     
    operations_research = column_property(Column("Operations Research", Integer, nullable=True))     
    self_supervised_learning = column_property(Column("Self-Supervised Learning", Integer, nullable=True))     
    graph_machine_learning = column_property(Column("Graph Machine Learning", Integer, nullable=True))     
    ethics_in_ai_and_ml = column_property(Column("Ethics in AI & ML", Integer, nullable=True))     
    information_extraction = column_property(Column("Information Extraction", Integer, nullable=True))     
    anomaly_detection = column_property(Column("Anomaly detection", Integer, nullable=True))     
    clustering_theory = column_property(Column("Clustering theory", Integer, nullable=True))     
    knowledge_graphs = column_property(Column("Knowledge Graphs", Integer, nullable=True))     
    optimization = column_property(Column("Optimization", Integer, nullable=True))     
    tableau = column_property(Column("Tableau", Integer, nullable=True))    
    powerbi = column_property(Column("PowerBi", Integer, nullable=True))    
    aws = column_property(Column("AWS", Integer, nullable=True))     
    azure = column_property(Column("Azure", Integer, nullable=True))     
    gcp = column_property(Column("GCP", Integer, nullable=True))     
    design_thinking = column_property(Column("Design Thinking", Integer, nullable=True))   
    fast_api = column_property(Column("FAST API", Integer, nullable=True))     
    flask = column_property(Column("Flask", Integer, nullable=True)) 
    employee = relationship("MACH_Employee", back_populates="skills")